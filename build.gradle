/*
 * Copyright (c) 2020 HRZN LTD
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


ext {
    buildNum = (System.getenv("BUILD_NUMBER") != null) ? System.getenv("BUILD_NUMBER") : "0"
}

archivesBaseName = project.archives_base_name
version = project.mod_version + "+build." + buildNum
group = project.maven_group

minecraft {
	refmapName = 'galacticraft-rewoven.refmap.json'
    accessWidener "src/main/resources/galacticraft_rewoven.accesswidener"
}

repositories {
    mavenLocal()
    jcenter() {
        content {
            includeGroup "me.shedaniel.cloth"
        }
    }
    maven {
        url "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup "io.github.cottonmc"
            includeGroup "io.github.fablabsmc"
        }
    }
    maven {
        url "https://maven.modmuss50.me"
        content {
            includeGroup "io.github.prospector"
        }
    }
    maven {
        url "https://dl.bintray.com/ladysnake/libs"
        content {
            includeGroup "io.github.onyxstudios.Cardinal-Components-API"
        }
    }
    maven {
        url "https://maven.abusedmaster.xyz/"
        content {
            includeGroup "dev.onyxstudios"
        }
    }
    maven {
        url "https://cdn.hrzn.studio/maven"
        content {
            includeGroup "com.hrznstudio"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}


dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_build}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation(fabricApi.module("fabric-api-base", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-blockrenderlayer-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-command-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-content-registries-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-item-groups-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-models-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-networking-blockentity-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-networking-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-object-builder-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-particles-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-registry-sync-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-renderer-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-renderer-indigo", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-renderer-registries-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-screen-handler-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-structure-api-v1", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-tag-extensions-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-textures-v0", project.fabric_version)) { transitive = false }
    modImplementation(fabricApi.module("fabric-tool-attribute-api-v1", project.fabric_version)) { transitive = false }

    modImplementation("me.shedaniel.cloth:config-2:${project.cloth_config_version}") {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
    }
    modImplementation("io.github.prospector:modmenu:${project.modmenu_version}") { transitive = false }
    modImplementation("io.github.fablabsmc:bannerpp:${project.bannerpp_version}") { transitive = false }

    modImplementation("me.shedaniel:RoughlyEnoughItems:${project.rei_version}") {
        exclude group: 'me.shedaniel.cloth'
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
        exclude group: 'org.jetbrains'
    }
    modImplementation("dev.onyxstudios:FOML:${project.foml_version}") {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
    }

    modApi("com.hrznstudio:GalacticraftAPI:${project.addon_version}") { transitive = false }
    modApi("io.github.cottonmc:UniversalComponents:${project.uc_version}") { transitive = false }
    modApi("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_version}") { transitive = false }
    modApi("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${project.cardinal_version}") { transitive = false }
    modApi("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_version}") { transitive = false }
    modApi("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_version}") { transitive = false }
    modApi("io.github.cottonmc:cotton-resources:${cotton_resources_version}") { transitive = false }

    //include everything mandatory inside the jar
    include("com.hrznstudio:GalacticraftAPI:${project.addon_version}")
    include("me.shedaniel.cloth:config-2:${project.cloth_config_version}")
    include("io.github.cottonmc:UniversalComponents:${project.uc_version}")
    include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_version}")
    include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-block:${project.cardinal_version}")
    include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cardinal_version}")
    include("io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_version}")
    include("io.github.cottonmc:cotton-resources:${cotton_resources_version}")
    include("dev.onyxstudios:FOML:${project.foml_version}")
    include("io.github.fablabsmc:bannerpp:${project.bannerpp_version}") { transitive = false }
    modRuntime("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementationMapped("com.google.code.findbugs:jsr305:3.0.1") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }

    // Minify json resources - https://stackoverflow.com/questions/41028030/gradle-minimize-json-resources-in-processresources#41029113
    doLast {
        fileTree(dir: outputs.files.asPath, includes: ["**/*.json", "**/*.mcmeta"]).each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

jar {
    from "LICENSE"
    manifest {
        attributes([
                "Implementation-Title"    : project.archives_base_name,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "Horizon Studio",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Maven-Artifact"          : "${group}:${archivesBaseName}:${project.version}",
                "ModSide"                 : "BOTH",
        ],)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId = 'com.hrznstudio'
            artifactId = 'galacticraft'

            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact(javadocJar)
        }
    }
    repositories {
        maven {
            url "s3://cdn.hrzn.studio/maven"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}
